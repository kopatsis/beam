
{{Ordering for now}}
 - Google Content API for entry applied
 - Set up repositories
 - Create BASIC routing

GENERAL CATEGORIES:

PAGES:

/ -- general basic website welcome page, more or less static

/products -- just all products with no filters applied
/products?[search filter] -- all products that match certain searching (not filtered at first, done on backend)
/products?[regular filter] -- one or more filters applied to all products, show the filters as seleted both on filter and at the top
/products?[page filter] -- paginated including all other filters
/products?[sort filter] -- defaults to page 1, sorting via sort options

/product/:handle -- generic product with everything rendered 
/product/:handle/:variantID -- generic product with everything rendered, selecting a specific variantID

/cart -- renders whatever is in the account/device account's cart
/checkout -- renders the information for the draft order incl tax calc

/orders/:id -- a specific order including status and list of all
/orders -- similar to collection, renders basics for orders in a list, with filtering and sorting options
/orders?[non page filter] -- one or more filters, sorts applied but still the first page
/orders?[page filter] -- NOT a part of filter save if exists, sorts and filters then skips X content, if NONE then reverts to P1

/lists -- just renders extreme basics for each list, no filtering or sorting or anything
/lists/:handle -- renders variant by variant basics with no filtering, sorting, paging. defaults to date descending but can be custom reordered

/articles {tbd name} -- borderline static page of generic list of bloggish
/articles/:handle {tbd name} -- a specific page, yes it is absolutely static

/auth -- the login/create account switching page, landing point
/refer -- referral for email link auth
/account -- user basics, including list of default (maybe all) addresses and ability to add new ones/modify any information


ACTIONS:
/account 
 - post (ideally htmx) add/change/default address [TBDD]
 - post (ideally htmx) change in name/basic info

/products
 - post (htmx) change filtering (non page)
 - post (htmx) change page with or without filtering
 - post (htmx) change sorting (back to page 1)

[search]
 - mini search, first few products + show all button (link to /products?q=query+encoded)
 - goes to /products?q=query+encoded

/products/:handle
 - add X to cart
 - add to X list
 - choose a variant

 ? create a rating 
 ? edit a rating 
 ? delete a rating
 ? load ratings (w/ nextid= behavior, no sorting for now)

/cart 
 - (ideally htmx) change product X quantity 
 - (ideally htmx) delete product X

/checkout
 - update billing address
 - update shipping address
 - update shipping method
 - post (real post ?) actual create order

/orders 
 - post (htmx) change filtering (non page) * incl guest order bool
 - post (htmx) change page with or without filtering
 - post create the order (no traditional in case there's an error)

/lists/:handle
 - delete from list
 - undelete from list

/auth
 - create an account (alpine)
 - login to an account (alpine)
 - email verification (websocket)
 - attach an existing cart to an account


OTHER TYPES:
- WEBHOOKS:
 - Orders
- BACKGROUND: runs scheduled in background for updating things that may not be triggered by webhooks
^ example, on account creation checks for guest orders w/ same email, marks them with id while still keeping guest id

PRINTFUL:
- Shipping:
 - POST (https://developers.printful.com/docs/#tag/Shipping-Rate-API/operation/calculateShippingRates) ~ Get ship rate by variant id x quantity at least
- Orders:
 - POST (https://developers.printful.com/docs/#tag/Orders-API/operation/createOrder) ~ Create an order
 ? POST (https://developers.printful.com/docs/#tag/Orders-API/operation/estimateOrderCosts) ~ Possibly as emergency to ensure profit
- Webhooks:
 - EVENT (https://developers.printful.com/docs/#tag/Webhook-API/operation/packageShipped) ~ Shipped, to email customer || Etsy update
 - EVENT (https://developers.printful.com/docs/#tag/Webhook-API/operation/packageReturned) ~ Returned, to email ME -> ?
 - EVENT (https://developers.printful.com/docs/#tag/Webhook-API/operation/orderCreated) ~ Created, to email customer !marketplace
 - EVENT (https://developers.printful.com/docs/#tag/Webhook-API/operation/orderUpdated) ~ Updated, to email ME -> ?
 - EVENT (https://developers.printful.com/docs/#tag/Webhook-API/operation/orderFailed) ~ Failed, to email ME -> ?
 - EVENT (https://developers.printful.com/docs/#tag/Webhook-API/operation/orderCanceled) ~ Canceled, to email ME -> ?
 - EVENT (https://developers.printful.com/docs/#tag/Webhook-API/operation/orderPutHold) ~ Hold?, to email ME -> ?
 - EVENT (https://developers.printful.com/docs/#tag/Webhook-API/operation/orderPutHoldApproval) ~ Hold?, to email ME -> ?
 - EVENT (https://developers.printful.com/docs/#tag/Webhook-API/operation/orderRemoveHold) ~ Remove?, to email ME -> ?
- Products:
 - GET (https://developers.printful.com/docs/#tag/Products-API/operation/getSyncProducts) ~ Get products for add to my system
 - PUT (https://developers.printful.com/docs/#tag/Products-API/operation/updateSyncProduct) ~ After get, any modifications to product group
 - PUT (https://developers.printful.com/docs/#tag/Products-API/operation/updateSyncVariant) ~ After get, any modifications to variants




LATER:
- MARKETPLACES: bundled code from each marketplace including order handling and potentially listing handling

ETSY:
- Inventory:
 - PUT (https://developers.etsy.com/documentation/reference/#operation/updateListingInventory) ~ Update inventory for a specific listing ID
- Orders:
 - GET (https://developers.etsy.com/documentation/reference/#operation/getShopReceipts) ~ Get shop receipts (including transactions) within a certain period
 - POST (https://developers.etsy.com/documentation/reference/#operation/createReceiptShipment) ~ Create a shipment (use this as it works with all shipping steps)
- Listings (Involved on the ENTRY side):
 - POST (https://developers.etsy.com/documentation/reference/#operation/createDraftListing) ~ Create the actual general level listing
 - PATCH (https://developers.etsy.com/documentation/reference/#operation/updateListing) ~ Primarily state active, could also be to edit parts
 - PUT (https://developers.etsy.com/documentation/reference/#operation/updateListingInventory) ~ Add variants on a listing, including inventory counts
 - POST (https://developers.etsy.com/documentation/reference/#operation/getListingImages) ~ Add images to the listing itself
 - POST (https://developers.etsy.com/documentation/reference/#operation/updateVariationImages) ~ Associate a listing image with ONE variant field (ie color)


 GOOGLE:
 - Specialty:
  - google.golang.org/api/content/v2.1 ~ create then insert the product

WALMART:
- Inventory:
 - POST (https://developer.walmart.com/api/us/mp/inventory#operation/updateBulkInventory) ~ Update by SKU (it looks like) using a feed
- Orders:
 - GET (https://developer.walmart.com/api/us/mp/orders#operation/getAllOrders) ~ Get orders via polling within a certain period
 - POST (https://developer.walmart.com/api/us/mp/orders#operation/acknowledgeOrders) ~ Must acknlowedge order to show it'll be fulfilled
 - POST (https://developer.walmart.com/api/us/mp/orders#operation/shippingUpdates) ~ Updates shipping info, should be covered after that
- Listings (Involved on the ENTRY side):
 - POST (https://developer.walmart.com/api/us/mp/items#operation/getSpec) ~ Specifications for an item class or multiple classes pre creation
 - POST (https://developer.walmart.com/api/us/mp/items#operation/itemBulkUploads) ~ Create the actual items
 - POST (https://developer.walmart.com/api/us/mp/price#operation/priceAndPromotionBulkUploads) ~ Update prices including a promotion (ideal)
 ? POST (https://developer.walmart.com/api/us/mp/price#operation/priceBulkUploads) ~ May need to use this to update prices
- Feed (Walmart specific):
 - GET (https://developer.walmart.com/api/us/mp/feeds#operation/getAllFeedStatuses) ~ Opt check multiple feed statuses from above requests, may be manual


EBAY:
- Inventory:
  - PUT (https://developer.ebay.com/api-docs/sell/inventory/resources/offer/methods/updateOffer) ~ Can update inventory (and pricing) this way
- Orders:
 - GET (https://developer.ebay.com/api-docs/sell/fulfillment/resources/order/methods/getOrders) ~ Get orders via polling within a certain period
 - POST (https://developer.ebay.com/api-docs/sell/fulfillment/resources/order/shipping_fulfillment/methods/createShippingFulfillment) ~ fulfill shipping incl tracking
- Listings (Involved on the ENTRY side):
 - POST (https://developer.ebay.com/api-docs/sell/inventory/resources/inventory_item/methods/bulkCreateOrReplaceInventoryItem) ~ Creates the variant first
 - PUT (https://developer.ebay.com/api-docs/sell/inventory/resources/inventory_item_group/methods/createOrReplaceInventoryItemGroup) ~ Creates the group AFTER
 - POST (https://developer.ebay.com/api-docs/sell/inventory/resources/offer/methods/bulkCreateOffer) ~ The actual inventory and price for a variant
 - POST (https://developer.ebay.com/api-docs/sell/inventory/resources/offer/methods/bulkPublishOffer) ~ Must publish the offer as well


 AMAZON:
 - Inventory:
  - PATCH (https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-reference#patchlistingsitem) ~ Seems to be how price and inventory adjusted
- Orders:
 - GET (https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#getorders) ~ Gets just the order and general info, not items
 - GET (https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#getorderitems) ~ Gets the actual items from the order
 - POST (https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#updateshipmentstatus) ~ Update the actual shipment information
 - POST (https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#confirmshipment) ~ To confirm the order has actually been shipped
- Listings (Involved on the ENTRY side):
 - PUT (https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-reference#putlistingsitem) ~ Apparently used for the entire listing and vars